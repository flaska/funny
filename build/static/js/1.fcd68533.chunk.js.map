{"version":3,"sources":["modules/leftMenu/leftMenu.component.js"],"names":["LeftMenuSettings","React","lazy","Promise","all","__webpack_require__","e","then","bind","styles","feedsTitle","marginTop","marginLeft","marginBottom","feedsIcon","marginRight","display","settingsIcon","float","LeftMenu","props","_this","Object","C_DEV_SRC_REACT_funny_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_DEV_SRC_REACT_funny_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_DEV_SRC_REACT_funny_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","settingsOpen","_this2","getEnabledFeeds","map","feed","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_material_ui_core_ListItem__WEBPACK_IMPORTED_MODULE_8___default","button","key","name","onClick","onSelectFeedSource","className","_material_ui_core_ListItemIcon__WEBPACK_IMPORTED_MODULE_10___default","style","feedIcon","provideIcon","icon","_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_9___default","primary","setState","_this3","_utils_components_lazyLoad_component__WEBPACK_IMPORTED_MODULE_17__","loadingFallback","_utils_components_dialogLoading_component__WEBPACK_IMPORTED_MODULE_18__","errorFallback","_utils_components_lazyLoadError_component__WEBPACK_IMPORTED_MODULE_19__","message","open","onClose","toggleSettings","_this4","Fragment","_material_ui_core_Drawer__WEBPACK_IMPORTED_MODULE_6___default","id","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_14___default","variant","_material_ui_icons_RssFeed__WEBPACK_IMPORTED_MODULE_11___default","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_16___default","color","_material_ui_icons_Settings__WEBPACK_IMPORTED_MODULE_12___default","_material_ui_core_Divider__WEBPACK_IMPORTED_MODULE_15___default","_material_ui_core_List__WEBPACK_IMPORTED_MODULE_7___default","getFeedOptions","renderSettings","Component"],"mappings":"4ZAkBMA,EAAmBC,IAAMC,KAAK,kBAAOC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAGrCC,EAAS,CACXC,WAAY,CACRC,UAAW,GACXC,WAAY,GACZC,aAAc,IAElBC,UAAW,CACPC,YAAa,GACbJ,UAAW,EACXK,QAAS,gBAEbC,aAAc,CACVC,MAAO,QACPH,YAAa,GACbH,WAAY,KAICO,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,cAAc,GAFbR,gFAIH,IAAAS,EAAAN,KACZ,OAAOO,cAAkBC,IAAI,SAACC,GAAS,OACnCC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUG,QAAM,EAACC,IAAKN,EAAKO,KAAMC,QAAS,kBAAIX,EAAKV,MAAMsB,mBAAmBT,IAAOU,UAAU,uBACzFT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAcU,MAAOpC,EAAOqC,SAAUH,UAAU,yBAC3CI,YAAYd,EAAKe,OAEtBd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAce,QAASjB,EAAKO,KAAMG,UAAU,sEAKhDnB,KAAKI,MAAMC,aAAcL,KAAK2B,SAAS,CAACtB,cAAc,IACrDL,KAAK2B,SAAS,CAACtB,cAAc,6CAEtB,IAAAuB,EAAA5B,KACZ,GAAIA,KAAKI,MAAMC,aAAc,OACzBK,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAUC,gBAAkBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,MACpBC,cAAetB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAeC,QAAQ,wCAE1CxB,EAAAC,EAAAC,cAACpC,EAAD,CAAkB2D,KAAMnC,KAAKI,MAAMC,aAAc+B,QAAS,kBAAIR,EAAKS,sDAGvE,IAAAC,EAAAtC,KACJ,OACIU,EAAAC,EAAAC,cAACF,EAAAC,EAAM4B,SAAP,KACI7B,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAQwB,KAAMnC,KAAKJ,MAAMuC,KAAMC,QAAS,kBAAIE,EAAK1C,MAAMwC,WAAWK,GAAG,YACjE/B,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAYgC,QAAQ,KAAKtB,MAAOpC,EAAOC,YACnCwB,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAaU,MAAOpC,EAAOK,YAD/B,QAGIoB,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAYmC,MAAM,UAAUL,GAAG,uBAAuBpB,MAAOpC,EAAOQ,aAAcwB,QAAS,kBAAIqB,EAAKD,mBAChG3B,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,QAGRD,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,MACAD,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,KACKX,KAAKkD,mBAGblD,KAAKmD,yBA3CgB1E,IAAM2E","file":"static/js/1.fcd68533.chunk.js","sourcesContent":["import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport RssFeedIcon from \"@material-ui/icons/RssFeed\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport {provideIcon} from '../utils/functions/icon.service';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport LazyLoad from \"../utils/components/lazyLoad.component\";\r\nimport DialogLoading from \"../utils/components/dialogLoading.component\";\r\nimport LazyLoadError from \"../utils/components/lazyLoadError.component\";\r\n\r\nimport {getEnabledFeeds} from '../utils/functions/feeds.provider'\r\n\r\nconst LeftMenuSettings = React.lazy(() =>  import(\"./leftMenuSettings.component\"));\r\n\r\n\r\nconst styles = {\r\n    feedsTitle: {\r\n        marginTop: 15,\r\n        marginLeft: 25,\r\n        marginBottom: 10\r\n    },\r\n    feedsIcon: {\r\n        marginRight: 10,\r\n        marginTop: 7,\r\n        display: 'inline-block'\r\n    },\r\n    settingsIcon: {\r\n        float: 'right',\r\n        marginRight: 15,\r\n        marginLeft: 15\r\n    }\r\n};\r\n\r\nexport default class LeftMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {settingsOpen: false};\r\n    }\r\n    getFeedOptions(){\r\n        return getEnabledFeeds().map((feed)=>{ return(\r\n            <ListItem button key={feed.name} onClick={()=>this.props.onSelectFeedSource(feed)} className='leftMenu_feedSource'>\r\n                <ListItemIcon style={styles.feedIcon} className='leftMenu_selectSource'>\r\n                    {provideIcon(feed.icon)}\r\n                </ListItemIcon>\r\n                <ListItemText primary={feed.name} className='leftMenu_selectSource'/>\r\n            </ListItem>\r\n        )});\r\n    }\r\n    toggleSettings(){\r\n        if (this.state.settingsOpen) this.setState({settingsOpen: false});\r\n        else this.setState({settingsOpen: true});\r\n    }\r\n    renderSettings(){\r\n        if (this.state.settingsOpen) return (\r\n            <LazyLoad loadingFallback={(<DialogLoading/>)}\r\n                    errorFallback={<LazyLoadError message='Offline... cannot open settings...'/>}\r\n                >\r\n                <LeftMenuSettings open={this.state.settingsOpen} onClose={()=>this.toggleSettings()}/>\r\n            </LazyLoad>);\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Drawer open={this.props.open} onClose={()=>this.props.onClose()} id='leftMenu'>\r\n                    <Typography variant=\"h5\" style={styles.feedsTitle}>\r\n                        <RssFeedIcon style={styles.feedsIcon}/>\r\n                        Feeds\r\n                        <IconButton color='primary' id='openLeftMenuSettings' style={styles.settingsIcon} onClick={()=>this.toggleSettings()}>\r\n                            <SettingsIcon/>\r\n                        </IconButton>\r\n                    </Typography>\r\n                    <Divider/>\r\n                    <List>\r\n                        {this.getFeedOptions()}\r\n                    </List>\r\n                </Drawer>\r\n                {this.renderSettings()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}"],"sourceRoot":""}