{"version":3,"sources":["modules/comments/commentMetadata.component.js","modules/utils/formatNumber.function.js","modules/comments/comment.component.js","modules/comments/commentsList.component.js"],"names":["CommentMetadata","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","infoChip_component","icon","props","commentData","author","n","score","numeral","format","React","Component","styles","marginLeft","Comment","_this","call","state","body","replace","data","Fragment","commentMetadata_component_CommentMetadata","Typography_default","dangerouslySetInnerHTML","__html","Divider_default","replies","showBody","style","isIndented","map","r","_id","hint","display","seeAllButton","CommentsList","postId","dataFetched","axios","get","then","response","setState","commentsRoot","_this2","className","onClick","onOpenSourceClick","clickable","color","responsive","comment_component_Comment","spinner_component"],"mappings":"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","file":"static/js/2.c21faa02.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {InfoChip} from \"../utils/infoChip.component\";\r\nimport {formatNumber} from \"../utils/formatNumber.function\";\r\n\r\nexport class CommentMetadata extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <InfoChip icon='md_face'>{this.props.commentData.author}</InfoChip>\r\n                <InfoChip icon='md_thumb_up'>{formatNumber(this.props.commentData.score)}</InfoChip>\r\n            </div>\r\n        );\r\n    }\r\n}","import numeral from \"numeral\";\r\n\r\nexport function formatNumber(n){\r\n    if (n>1000) return numeral(n).format('0.0a');\r\n    else return n;\r\n}","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {CommentMetadata} from \"./commentMetadata.component\";\r\n\r\nconst styles = {\r\n    replies: {\r\n        marginLeft: 20\r\n    }\r\n};\r\n\r\nexport class Comment extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n        if (this.props.commentData.body) this.state.body = this.props.commentData.body.replace(/\\n/g, '<br>');\r\n    }\r\n    showBody(data){\r\n        if (!data.body) return(<div></div>);\r\n        return(\r\n            <React.Fragment>\r\n                <CommentMetadata commentData={this.props.commentData}/>\r\n                <Typography dangerouslySetInnerHTML={{__html: this.state.body}}></Typography>\r\n                <Divider />\r\n            </React.Fragment>);\r\n    }\r\n    isIndented(commentData){\r\n        if (commentData.body) return styles.replies;\r\n    }\r\n    render() {\r\n        if (!this.props.commentData || !this.props.commentData.replies) return null;\r\n        return (\r\n            <React.Fragment>\r\n                {this.showBody(this.props.commentData)}\r\n                <div style={this.isIndented(this.props.commentData)}>\r\n                    {this.props.commentData.replies.map(r=><Comment commentData={r} key={r._id}></Comment>)}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport axios from \"axios/index\";\r\nimport {Comment} from './comment.component'\r\nimport {InfoChip} from \"../utils/infoChip.component\";\r\nimport Spinner from \"../utils/spinner.component\";\r\n\r\nconst styles = {\r\n    hint: {display: 'inline-block'},\r\n    seeAllButton: {\r\n        display: 'inline-block'\r\n    }\r\n};\r\n\r\nexport default class CommentsList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            postId: this.props.postId,\r\n            dataFetched: false\r\n        };\r\n        axios.get('/api/reddit/comments?postId='+this.state.postId).then(response => {\r\n            this.setState({commentsRoot: response.data, dataFetched: true});\r\n        });\r\n    }\r\n    render() {\r\n        if (!this.state.dataFetched) return (<Spinner/>);\r\n        return (\r\n            <div className='commentsContainer'>\r\n                <InfoChip style={styles.hint}  icon='md_thumb_up'>\r\n                    Top comments\r\n                </InfoChip>\r\n                <div style={styles.seeAllButton} className='comments_openSource' onClick={()=>{this.props.onOpenSourceClick()}}>\r\n                    <InfoChip icon='fa_comments' clickable color='primary' responsive={false}>All Comments</InfoChip>\r\n                </div>\r\n                <Comment commentData={this.state.commentsRoot}></Comment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}